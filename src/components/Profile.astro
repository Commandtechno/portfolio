---
import { Image } from "astro:assets";
import Avatar from "../assets/avatar.gif";
---

<div id="profile">
  <div id="profile-avatar-container">
    <Image alt="My avatar" id="profile-avatar" src={Avatar} width="150" height="150" />
  </div>
</div>

<script>
  import DoNotDisturb from "../assets/status/dnd.svg";
  import Idle from "../assets/status/idle.svg";
  import Online from "../assets/status/online.svg";
  import Streaming from "../assets/status/streaming.svg";

  import { $ } from "../util/$";
  import { ActivityType } from "discord-api-types/v10";
  import type { GatewayPresenceUpdateDispatchData } from "discord-api-types/v10";
  import { getAssetUrl } from "../util/getAssetUrl";

  const $profile = $("profile");
  const $profileAvatarContainer = $("profile-avatar-container");

  const $profileAvatarStatusContainer = document.createElement("div");
  $profileAvatarStatusContainer.id = "profile-avatar-status-container";
  const $profileAvatarStatus = document.createElement("img");
  $profileAvatarStatus.id = "profile-avatar-status";
  $profileAvatarStatusContainer.appendChild($profileAvatarStatus);

  let $currentProfileActivity: HTMLElement | null = null;

  function setStatus(status: string, src: string) {
    $profileAvatarStatus.src = src;
    $profileAvatarStatusContainer.title = status;
    if (!$profileAvatarStatusContainer.isConnected) $profileAvatarContainer.appendChild($profileAvatarStatusContainer);
  }

  function connect() {
    const ws = new WebSocket(
      import.meta.env.DEV
        ? `wss://commandtechno.com/presence`
        : `${window.location.protocol === "https:" ? "wss" : "ws"}://${window.location.host}/presence`
    );

    let ping = setInterval(() => ws.send(""), 5000);
    ws.addEventListener("message", message => {
      const presence = JSON.parse(message.data) as GatewayPresenceUpdateDispatchData;
      const isStreaming = presence.activities?.some(activity => activity.type === ActivityType.Streaming);

      if (isStreaming) {
        setStatus("Streaming", Streaming.src);
      } else
        switch (presence.status) {
          case "online":
            setStatus("Online", Online.src);
            break;

          case "dnd":
            setStatus("Do Not Disturb", DoNotDisturb.src);
            break;

          case "idle":
            setStatus("Idle", Idle.src);
            break;

          case "offline":
            $profileAvatarStatusContainer.remove();
            break;
        }

      const activity = presence.activities?.find(activity => activity.type !== ActivityType.Custom);
      if (!activity) {
        $currentProfileActivity?.remove();
        return;
      }

      let { url, name, details, state } = activity;
      let $progressBar: HTMLDivElement | null = null;

      if (activity.id.startsWith("spotify")) {
        if (activity.sync_id) url = "https://open.spotify.com/track/" + activity.sync_id;
        if (activity.details) name = activity.details;
        if (activity.state) details = "by " + activity.state;
        if (activity.assets?.large_text) state = "on " + activity.assets.large_text;
        if (activity.timestamps?.start && activity.timestamps?.end) {
          const { start, end } = activity.timestamps;
          const progress = (Date.now() - start) / (end - start);
          const $barContainer = document.createElement("div");
          $barContainer.id = "profile-activity-bar-container";

          const $bar = document.createElement("div");
          $bar.id = "profile-activity-bar";
          $bar.style.width = `${progress * 100}%`;
          let interval = setInterval(() => {
            if (!$progressBar?.isConnected) clearInterval(interval);
            const progress = (Date.now() - start) / (end - start);
            $bar.style.width = `${progress * 100}%`;
          }, 1000);

          $barContainer.appendChild($bar);
          $progressBar = $barContainer;
        }
      }

      let $profileActivity = url ? document.createElement("a") : document.createElement("div");
      if (url) {
        $profileActivity = document.createElement("a");
        $profileActivity.href = url;
        $profileActivity.rel = "noopener norefferer";
        $profileActivity.target = "_blank";
        $profileActivity.className = "hover";
      } else {
        $profileActivity = document.createElement("div");
      }

      $profileActivity.id = "profile-activity";

      const largeImageUrl =
        activity.assets?.large_image && getAssetUrl(activity.assets.large_image, activity.application_id);
      if (largeImageUrl) {
        const $profileActivityAssets = document.createElement("div");
        $profileActivityAssets.id = "profile-activity-assets";

        const $profileActivityLargeImage = document.createElement("img");
        $profileActivityLargeImage.id = "profile-activity-large-image";
        $profileActivityLargeImage.src = largeImageUrl;
        $profileActivityLargeImage.width = 120;
        $profileActivityLargeImage.height = 120;
        if (activity.assets?.large_text) {
          $profileActivityLargeImage.alt = activity.assets.large_text;
          $profileActivityLargeImage.title = activity.assets.large_text;
        }

        $profileActivityAssets.appendChild($profileActivityLargeImage);

        const smallImageUrl =
          activity.assets?.small_image && getAssetUrl(activity.assets.small_image, activity.application_id);
        if (smallImageUrl) {
          const $profileActivitySmallImageContainer = document.createElement("div");
          $profileActivitySmallImageContainer.id = "profile-activity-small-image-container";

          const $profileActivitySmallImage = document.createElement("img");
          $profileActivitySmallImage.id = "profile-activity-small-image";
          $profileActivitySmallImage.src = smallImageUrl;
          $profileActivitySmallImage.width = 40;
          $profileActivitySmallImage.height = 40;
          if (activity.assets?.small_text) {
            $profileActivitySmallImage.alt = activity.assets.small_text;
            $profileActivitySmallImage.title = activity.assets.small_text;
          }

          $profileActivitySmallImageContainer.appendChild($profileActivitySmallImage);
          $profileActivityAssets.appendChild($profileActivitySmallImageContainer);
        }

        $profileActivity.appendChild($profileActivityAssets);
      }

      const $profileActivityContent = document.createElement("div");
      $profileActivityContent.id = "profile-activity-content";

      if (name) {
        const $profileActivityName = document.createElement("h2");
        $profileActivityName.id = "profile-activity-name";
        $profileActivityName.textContent = name;
        $profileActivityContent.appendChild($profileActivityName);
      }

      if (details) {
        const $profileActivityDetails = document.createElement("h3");
        $profileActivityDetails.id = "profile-activity-details";
        $profileActivityDetails.textContent = details;
        $profileActivityContent.appendChild($profileActivityDetails);
      }

      if (state) {
        const $profileActivityState = document.createElement("h3");
        $profileActivityState.id = "profile-activity-state";
        $profileActivityState.textContent = state;
        $profileActivityContent.appendChild($profileActivityState);
      }

      if ($progressBar) $profileActivityContent.appendChild($progressBar);
      $profileActivity.appendChild($profileActivityContent);

      if ($currentProfileActivity) $profile.replaceChild($profileActivity, $currentProfileActivity);
      else $profile.appendChild($profileActivity);
      $currentProfileActivity = $profileActivity;
    });

    ws.addEventListener("close", () => {
      $profileAvatarStatusContainer.remove();
      $profile;
      clearInterval(ping);
      setTimeout(connect, 5000);
    });
  }

  connect();
</script>

<style is:global>
  #profile {
    gap: 25px;
    height: 150px;
    display: flex;
  }

  /*
  avatar and status thing
*/

  #profile-avatar-container {
    position: relative;
  }

  #profile-avatar {
    border-radius: 10px;
  }

  #profile-avatar-status-container {
    width: 50px;
    height: 50px;
    right: -20px;
    bottom: -20px;
    padding: 10px;
    border-radius: 50%;
    position: absolute;
    background-color: var(--dark-primary);
  }

  #profile-avatar-status {
    width: 100%;
    height: 100%;
  }

  /* 
  activity
*/

  #profile-activity {
    gap: 15px;
    width: 100%;
    padding: 15px;
    border-radius: 15px;
    display: flex;
    background-color: var(--dark-secondary);
  }

  /* 
  images and stuff
*/

  #profile-activity-assets {
    position: relative;
  }

  #profile-activity-large-image {
    border-radius: 7.5px;
  }

  #profile-activity-small-image-container {
    width: 40px;
    height: 40px;
    right: -16px;
    bottom: -16px;
    padding: 8px;
    border-radius: 50%;
    position: absolute;
    background-color: var(--dark-secondary);
  }

  #profile-activity-small-image {
    height: 100%;
    border-radius: 50%;
  }

  /* 
  the text
*/

  #profile-activity-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    width: 0px;
    flex-grow: 1;
  }

  #profile-activity-name,
  #profile-activity-details,
  #profile-activity-state {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  #profile-activity-details,
  #profile-activity-state {
    color: var(--light-secondary);
    font-weight: normal;
  }

  /*
  spotify progress bar thing
*/

  #profile-activity-bar-container {
    height: 6px;
    margin-top: 10px;
    border-radius: 3px;
    background-color: var(--light-tertiary);
  }

  #profile-activity-bar {
    height: 6px;
    min-width: 6px;
    max-width: 100%;
    border-radius: 3px;
    background-color: var(--light-primary);
  }

  #social-desktop-container {
    gap: 3%;
    margin-top: 10px;
    display: flex;
    justify-content: center;
  }

  #social-mobile-container {
    display: none;
    margin-top: 10px;
  }

  /* 
  its big so no mobile
*/

  @media screen and (max-width: 600px) {
    #profile-activity {
      display: none;
    }

    #social-desktop-container {
      display: none !important;
    }

    #social-mobile-container {
      display: grid;
    }
  }
</style>
