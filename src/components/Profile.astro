---
import { Image } from "astro:assets";
import Avatar from "../assets/avatar.gif";
---

<div id="profile">
  <div id="profile-avatar-container">
    <Image alt="My avatar" id="profile-avatar" src={Avatar} width="150" height="150" />
  </div>
</div>

<script>
  import DoNotDisturb from "../assets/status/dnd.svg";
  import Idle from "../assets/status/idle.svg";
  import Online from "../assets/status/online.svg";
  import Streaming from "../assets/status/streaming.svg";

  import type { APIApplication, GatewayPresenceUpdateDispatchData } from "discord-api-types/v10";
  import { ActivityType, CDNRoutes, ImageFormat, RouteBases } from "discord-api-types/v10";
  import { formatDigital, formatNatural } from "../util/activityDuration";
  import { getAssetUrl } from "../util/getAssetUrl";
  import { $ } from "../util/$";

  const $profile = $("profile");
  const $profileAvatarContainer = $("profile-avatar-container");

  const $profileAvatarStatusContainer = document.createElement("div");
  $profileAvatarStatusContainer.id = "profile-avatar-status-container";
  const $profileAvatarStatus = document.createElement("img");
  $profileAvatarStatus.id = "profile-avatar-status";
  $profileAvatarStatusContainer.appendChild($profileAvatarStatus);

  let $currentProfileActivity: HTMLElement | null = null;

  function setStatus(status: string, src: string) {
    $profileAvatarStatus.src = src;
    $profileAvatarStatusContainer.title = status;
    if (!$profileAvatarStatusContainer.isConnected) $profileAvatarContainer.appendChild($profileAvatarStatusContainer);
  }

  function makeActivityImage(id: string, size: number, src: string, alt?: string) {
    const $img = document.createElement("img");
    $img.id = "profile-activity-" + id;
    $img.width = size;
    $img.height = size;
    $img.src = src;
    if (alt) {
      $img.alt = alt;
      $img.title = alt;
    }
    return $img;
  }

  function makeActivityText(tag: keyof HTMLElementTagNameMap, id: string, text: string) {
    const $text = document.createElement(tag);
    $text.id = "profile-activity-" + id;
    $text.textContent = text;
    return $text;
  }

  function makeContainer(id?: string) {
    const $container = document.createElement("div");
    $container.id = id ? "profile-activity-" + id : "profile-activity";
    return $container;
  }

  function makeLinkContainer(url: string, id?: string) {
    const $container = document.createElement("a");
    $container.id = id ? "profile-activity-" + id : "profile-activity";
    $container.href = url;
    $container.rel = "noopener norefferer";
    $container.target = "_blank";
    $container.className = "hover";
    return $container;
  }

  function connect() {
    const ws = new WebSocket(
      import.meta.env.DEV
        ? `wss://commandtechno.com/presence`
        : `${window.location.protocol === "https:" ? "wss" : "ws"}://${window.location.host}/presence`
    );

    let ping = setInterval(() => ws.send(""), 5000);
    ws.addEventListener("message", message => {
      const presence = JSON.parse(message.data) as GatewayPresenceUpdateDispatchData;
      const isStreaming = presence.activities?.some(activity => activity.type === ActivityType.Streaming);

      if (isStreaming) {
        setStatus("Streaming", Streaming.src);
      } else
        switch (presence.status) {
          case "online":
            setStatus("Online", Online.src);
            break;

          case "dnd":
            setStatus("Do Not Disturb", DoNotDisturb.src);
            break;

          case "idle":
            setStatus("Idle", Idle.src);
            break;

          case "offline":
            $profileAvatarStatusContainer.remove();
            break;
        }

      const activity = presence.activities?.find(activity => activity.type !== ActivityType.Custom);
      if (!activity) {
        $currentProfileActivity?.remove();
        return;
      }

      const $profileActivity = activity.url ? makeLinkContainer(activity.url) : makeContainer();
      const $profileActivityContent = makeContainer("content");
      let $progressBar: HTMLDivElement | null = null;

      if (activity.id.startsWith("spotify")) {
        if (activity.sync_id) activity.url = "https://open.spotify.com/track/" + activity.sync_id;
        if (activity.details) activity.name = activity.details;
        if (activity.state) activity.details = "by " + activity.state;
        if (activity.assets?.large_text) activity.state = "on " + activity.assets.large_text;
        if (activity.timestamps?.start && activity.timestamps?.end) {
          const { start, end } = activity.timestamps;
          const progress = (Date.now() - start) / (end - start);
          const $barContainer = makeContainer("bar-container");
          const $bar = makeContainer("bar");
          $bar.style.width = `${progress * 100}%`;
          let interval = setInterval(() => {
            if (!$progressBar?.isConnected) clearInterval(interval);
            const progress = (Date.now() - start) / (end - start);
            $bar.style.width = `${progress * 100}%`;
          }, 1000);

          $barContainer.appendChild($bar);
          $progressBar = $barContainer;
        }
      } else {
        if (activity.name) $profileActivityContent.appendChild(makeActivityText("h2", "name", activity.name));
        if (activity.details) $profileActivityContent.appendChild(makeActivityText("h3", "details", activity.details));
        if (activity.state) $profileActivityContent.appendChild(makeActivityText("h3", "state", activity.state));
        if (activity.timestamps?.end)
          $profileActivityContent.appendChild(
            makeActivityText("h3", "time", formatDigital(activity.timestamps.end - Date.now(), "left"))
          );
        else if (activity.timestamps?.start)
          $profileActivityContent.appendChild(
            makeActivityText(
              "h3",
              "time",
              activity.details || activity.state
                ? formatDigital(Date.now() - activity.timestamps.start, "elapsed")
                : formatNatural(Date.now() - activity.timestamps.start)
            )
          );
      }

      const largeImageUrl =
        activity.assets?.large_image && getAssetUrl(activity.assets.large_image, activity.application_id);
      if (largeImageUrl) {
        const $profileActivityAssets = makeContainer("assets");
        $profileActivityAssets.appendChild(
          makeActivityImage("large-image", 120, largeImageUrl, activity.assets?.large_text)
        );

        const smallImageUrl =
          activity.assets?.small_image && getAssetUrl(activity.assets.small_image, activity.application_id);

        if (smallImageUrl) {
          const $profileActivitySmallImageContainer = makeContainer("small-image-container");
          $profileActivitySmallImageContainer.appendChild(
            makeActivityImage("small-image", 40, smallImageUrl, activity.assets?.small_text)
          );
          $profileActivityAssets.appendChild($profileActivitySmallImageContainer);
        }

        $profileActivity.prepend($profileActivityAssets);
      } else if (activity.application_id)
        fetch(`${RouteBases.api}/applications/${activity.application_id}/rpc`)
          .then(res => res.json())
          .then((rpc: APIApplication) => {
            if (!rpc.icon) return;
            const $profileActivityAssets = makeContainer("assets");
            $profileActivityAssets.appendChild(
              makeActivityImage(
                "large-image",
                120,
                RouteBases.cdn + CDNRoutes.applicationIcon(rpc.id, rpc.icon, ImageFormat.WebP),
                rpc.name
              )
            );

            $profileActivity.prepend($profileActivityAssets);
          });

      if ($progressBar) $profileActivityContent.appendChild($progressBar);
      $profileActivity.appendChild($profileActivityContent);

      if ($currentProfileActivity) $profile.replaceChild($profileActivity, $currentProfileActivity);
      else $profile.appendChild($profileActivity);
      $currentProfileActivity = $profileActivity;
    });

    ws.addEventListener("close", () => {
      $profileAvatarStatusContainer.remove();
      $profile;
      clearInterval(ping);
      setTimeout(connect, 5000);
    });
  }

  connect();
</script>

<style is:global>
  #profile {
    gap: 25px;
    height: 150px;
    display: flex;
  }

  /*
  avatar and status thing
*/

  #profile-avatar-container {
    position: relative;
  }

  #profile-avatar {
    border-radius: 10px;
  }

  #profile-avatar-status-container {
    width: 50px;
    height: 50px;
    right: -20px;
    bottom: -20px;
    padding: 10px;
    border-radius: 50%;
    position: absolute;
    background-color: var(--dark-primary);
  }

  #profile-avatar-status {
    width: 100%;
    height: 100%;
  }

  /* 
  activity
*/

  #profile-activity {
    gap: 15px;
    width: 100%;
    padding: 15px;
    border-radius: 15px;
    display: flex;
    background-color: var(--dark-secondary);
  }

  /* 
  images and stuff
*/

  #profile-activity-assets {
    position: relative;
  }

  #profile-activity-large-image {
    border-radius: 5px;
  }

  #profile-activity-small-image-container {
    width: 40px;
    height: 40px;
    right: -16px;
    bottom: -16px;
    padding: 8px;
    border-radius: 50%;
    position: absolute;
    background-color: var(--dark-secondary);
  }

  #profile-activity-small-image {
    height: 100%;
    border-radius: 50%;
  }

  /* 
  the text
*/

  #profile-activity-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    width: 0px;
    flex-grow: 1;
  }

  #profile-activity-content > * {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  #profile-activity-content > h3 {
    color: var(--light-secondary);
    font-weight: normal;
  }

  /*
  spotify progress bar thing
*/

  #profile-activity-bar-container {
    height: 6px;
    margin-top: 10px;
    border-radius: 3px;
    background-color: var(--light-tertiary);
  }

  #profile-activity-bar {
    height: 6px;
    min-width: 6px;
    max-width: 100%;
    border-radius: 3px;
    background-color: var(--light-primary);
  }

  #social-desktop-container {
    gap: 3%;
    margin-top: 10px;
    display: flex;
    justify-content: center;
  }

  #social-mobile-container {
    display: none;
    margin-top: 10px;
  }

  /* 
  its big so no mobile
*/

  @media screen and (max-width: 600px) {
    #profile-activity {
      display: none;
    }

    #social-desktop-container {
      display: none !important;
    }

    #social-mobile-container {
      display: grid;
    }
  }
</style>
